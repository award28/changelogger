name: "Continuous Integration"

on:
  pull_request:
    branches: main

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    #----------------------------------------------
    #       check-out repo and set-up python
    #----------------------------------------------
    - name: Check out repository
      uses: actions/checkout@v3
    - name: Set up python
      id: setup-python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    #----------------------------------------------
    #             load cached poetry
    #----------------------------------------------
    - name: Load cached Poetry installation
      id: cached-poetry
      uses: actions/cache@v3
      with:
        path: ~/.local  # the path depends on the OS
        key: poetry-0  # increment to reset cache

    #----------------------------------------------
    #  -----  install & configure poetry  -----
    #----------------------------------------------
    - name: Install Poetry
      if: steps.cached-poetry.outputs.cache-hit != 'true'
      uses: snok/install-poetry@v1
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true
        installer-parallel: true

    #----------------------------------------------
    #       load cached venv if cache exists
    #----------------------------------------------
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

    #----------------------------------------------
    # install dependencies if cache does not exist
    #----------------------------------------------
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction

    #----------------------------------------------
    #              run test suite
    #----------------------------------------------
    - name: Run tests
      run: |
        source .venv/bin/activate
        coverage run -m pytest
        coverage xml

    #----------------------------------------------
    #              get coverage
    #----------------------------------------------
    - uses: codecov/codecov-action@v3
      with:
        files: ./coverage.xml
    # - name: Get Coverage
    #   uses: orgoro/coverage@v3
    #   with:
    #       coverageFile: coverage.xml
    #       token: ${{ secrets.GITHUB_TOKEN }}
    #       thresholdAll: 0.9
    #       thresholdNew: 0.9

  check:
    runs-on: ubuntu-latest
    steps:
    #----------------------------------------------
    #       check-out repo and set-up python
    #----------------------------------------------
    - name: Check out repository
      uses: actions/checkout@v3
    - name: Set up python
      id: setup-python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    #----------------------------------------------
    #             load cached poetry
    #----------------------------------------------
    - name: Load cached Poetry installation
      id: cached-poetry
      uses: actions/cache@v3
      with:
        path: ~/.local  # the path depends on the OS
        key: poetry-0  # increment to reset cache

    #----------------------------------------------
    #  -----  install & configure poetry  -----
    #----------------------------------------------
    - name: Install Poetry
      if: steps.cached-poetry.outputs.cache-hit != 'true'
      uses: snok/install-poetry@v1
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true
        installer-parallel: true

    #----------------------------------------------
    #       load cached venv if cache exists
    #----------------------------------------------
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

    #----------------------------------------------
    # install dependencies if cache does not exist
    #----------------------------------------------
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction

    #----------------------------------------------
    #         check the versioned files
    #----------------------------------------------
    - name: Check Versioned Files
      run: |
        source .venv/bin/activate
        pip install .
        changelogger manage check
