name: Main Release
run-name: "Main Release"
on:
  push:
    branches:
      - 'main'

permissions:
  # Need permission to write to the Releases tab now.
  # https://github.com/ncipollo/release-action/issues/208.
  contents: write

jobs:
  determine-if-deploy:
    runs-on: ubuntu-latest
    outputs:
      deploy: ${{ steps.tag_exists.outputs.exists  == 'false' }}
      version: ${{ steps.latest_version.outputs.version }}
    steps:
    #----------------------------------------------
    #       check-out repo and set-up python
    #----------------------------------------------
    - uses: actions/checkout@v3
    - uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    #----------------------------------------------
    # install changelogger and get latest version
    #----------------------------------------------
    - name: Install Changelogger
      run: pip install changelogged==0.9.0
    - name: Get Latest Version
      id: latest_version
      run: |
        VERSION=$(changelogger versions --latest)
        echo "version=${VERSION}" >> $GITHUB_OUTPUT

    #----------------------------------------------
    #             check if tag exists
    #----------------------------------------------
    - uses: mukunku/tag-exists-action@v1.2.0
      id: tag_exists
      with:
        tag: ${{ steps.latest_version.outputs.version }}

  github-tag-and-release:
    runs-on: ubuntu-latest
    needs: determine-if-deploy
    if: needs.determine-if-deploy.outputs.deploy == 'true'
    steps:
    #----------------------------------------------
    #       check-out repo and set-up python
    #----------------------------------------------
    - uses: actions/checkout@v3
    - name: Setup Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    #----------------------------------------------
    # install changelogger and get release notes
    #----------------------------------------------
    - name: Install Changelogger
      run: pip install changelogged==0.9.0
    - name: Get Release Notes
      id: changelog
      run: |
        DELIMITER=$(openssl rand -base64 12)
        VERSION=${{ needs.determine-if-deploy.outputs.version }}
        # Need to capture multiline output in env to preserve newlines
        echo "content<<${DELIMITER}" >> $GITHUB_ENV
        # Add changelog content to the env for release notes
        changelogger notes $VERSION --no-pretty >> $GITHUB_ENV
        echo ${DELIMITER} >> $GITHUB_ENV

    #----------------------------------------------
    #        create tag and submit release
    #----------------------------------------------
    - name: Create GitHub Tag & Release
      uses: ncipollo/release-action@v1
      with:
        tag: ${{ needs.determine-if-deploy.outputs.version }}
        commit: ${{ github.sha }}
        name: Release ${{ needs.determine-if-deploy.outputs.version }}
        body: ${{ env.content }}

  deploy:
    runs-on: ubuntu-latest
    needs: github-tag-and-release
    steps:
    #----------------------------------------------
    #       check-out repo and set-up python
    #----------------------------------------------
    - name: Check out repository
      uses: actions/checkout@v3
    - name: Set up python
      id: setup-python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    #----------------------------------------------
    #             load cached poetry
    #----------------------------------------------
    - name: Load cached Poetry installation
      id: cached-poetry
      uses: actions/cache@v3
      with:
        path: ~/.local  # the path depends on the OS
        key: poetry-0  # increment to reset cache

    #----------------------------------------------
    #  -----  install & configure poetry  -----
    #----------------------------------------------
    - name: Install Poetry
      if: steps.cached-poetry.outputs.cache-hit != 'true'
      uses: snok/install-poetry@v1
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true
        installer-parallel: true

    #----------------------------------------------
    #            build the package
    #----------------------------------------------
    - name: Build Changelogger
      run: poetry build

    #----------------------------------------------
    #             publish to pypi
    #----------------------------------------------
    - name: Publish Python distribution to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_SECRET_TOKEN }}
